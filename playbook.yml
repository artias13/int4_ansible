- name: SETUP SERVER
  hosts: ansible1
  become: yes
  tasks:
    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
        upgrade: dist
        cache_valid_time: 86400
    
    - name: "Add user '{{ user_name }}'"
      user:
        name: "{{ user_name }}"
        password: "{{ user_password_hash }}"
        shell: "/bin/bash"
        groups: ["sudo", "systemd-journal"]
        state: present

    - name: "Setup authorized_keys for {{ user_name }}"
      authorized_key:
        user: "{{ user_name }}"
        key: "{{ user_ssh_key }}"
        state: present

    - name: "Ensure /etc/sudoers.d exists"
      file:
        path: "/etc/sudoers.d"
        state: directory
        owner: root
        group: root

    - name: Add user to sudoers file
      hosts: localhost
      become: true
      tasks:
        - name: Add user to sudoers file
          lineinfile:
            dest: /etc/sudoers
            line: 'ansible ALL=(ALL:ALL) NOPASSWD:ALL'
            validate: 'visudo -cf %s'
            state: present

    - name: "Set the timezone"
      file:
        src: "/usr/share/zoneinfo/{{ time_zone_file }}"
        dest: "/etc/localtime"
        state: link
        owner: root
        group: root

    - name: "Setting the hostname"
      copy:
        content: "{{ host_name }}"
        dest: "/etc/hostname"
        owner: root
        group: root
        mode: 0644

    - name: "Adding hostname to /etc/hosts"
      lineinfile:
        path: "/etc/hosts"
        line: "127.1.1.1 {{ host_name }}.{{ host_domain }} {{ host_name }}"
        state: present

    - name: "Disable SSH password authentication"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regex: '^(\#|\s)*PasswordAuthentication\s*(yes|no)$'
        line: "PasswordAuthentication no"

    - name: "Ensure system.conf.d exists"
      file:
        path: "/etc/systemd/system.conf.d"
        state: directory
        owner: root
        group: root
        mode: 0755

    - name: "Configure systemd-system settings"
      copy:
        src: "system-override.conf"
        dest: "/etc/systemd/system.conf.d/override.conf"
        owner: root
        group: root
        mode: 0644

    - name: "Ensure journald.conf.d exists"
      file:
        path: "/etc/systemd/journald.conf.d"
        state: directory
        owner: root
        group: root
        mode: 0755

    - name: "Configure systemd-journald"
      copy:
        src: "journal-override.conf"
        dest: "/etc/systemd/journald.conf.d/override.conf"
        owner: root
        group: root
        mode: 0644
      notify:
        - "Restart systemd-journald"
    
    - name: Install Python packages
      pip:
        name:
          - psycopg2-binary
  
    - name: Add PostgreSQL APT repository key
      apt_key:
        url: "https://www.postgresql.org/media/keys/ACCC4CF8.asc"
        state: present

    - name: Add PostgreSQL APT repository
      apt_repository:
        repo: "deb http://apt.postgresql.org/pub/repos/apt/ jammy-pgdg main"
        state: present
        filename: "pgdg"

    - name: Install required packages
      apt:
        name:
          - postgresql-14
          - postgresql-contrib
          - postgresql-common
          - python3
          - python3.10
          - python3-dev
          - python3-pip
          - jq
        state: present

    - name: Check PostgreSQL version
      command: psql --version
      register: psql_version
      ignore_errors: true

    - name: Check if PostgreSQL is installed
      fail:
        msg: "PostgreSQL is not installed on this host."
      when: psql_version.failed

    - name: Check if PostgreSQL cluster exists
      shell: |
        if pg_lsclusters | grep -q '14 main'; then
          echo 'Cluster exists'
        else
          pg_createcluster 14 main
        fi
      register: create_cluster
      ignore_errors: true

    - name: Check if PostgreSQL is running
      command: pg_ctlcluster 14 main status
      register: postgres_status
      ignore_errors: true

    - name: Start PostgreSQL cluster if not running
      command: pg_ctlcluster 14 main start
      when: postgres_status.stdout.find('is not running') != -1

- name: CONFIGURE DB
  hosts: ansible1
  become: yes
  tasks:
    - name: Setup pg_hba.conf
      blockinfile:
        create: true
        path: /etc/postgresql/14/main/pg_hba.conf
        block: |
          local all {{ hostvars[inventory_hostname]['DB_USER'] }} peer
          host all all {{ hostvars[inventory_hostname]['DB_HOST'] }}/32 trust

    - name: Setup postgresql.conf
      blockinfile:
        create: true
        path: /etc/postgresql/14/main/postgresql.conf
        block: | 
          listen_addresses = '*'
          port = {{ hostvars[inventory_hostname]['DB_PORT'] }}
          log_destination = 'stderr'
          logging_collector = on
          log_directory = '/var/log/postgresql/'
          log_filename = 'postgresql.log'
          log_file_mode = 0644

    - name: Allow PostgreSQL through firewall
      ufw:
        rule: allow
        port: "{{ hostvars[inventory_hostname]['DB_PORT'] }}"
        proto: 'tcp'

    - name: Restart PostgreSQL
      service:
        name: postgresql
        state: restarted

    - name: Create test database
      community.general.postgresql_db:
        name: "{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"
        encoding: UTF-8
        template: template0
      become: yes
      become_user: postgres

    - name: Create Email Addresses table
      command: psql -d {{ hostvars[inventory_hostname]['DB_DATABASE'] }} -c "CREATE TABLE email_addresses (id serial PRIMARY KEY, email_address text);"
      become_user: postgres
      ignore_errors: true

    - name: Create Phone Numbers table
      command: psql -d {{ hostvars[inventory_hostname]['DB_DATABASE'] }} -c "CREATE TABLE phone_numbers (id serial PRIMARY KEY, phone_number text);"
      become_user: postgres
      ignore_errors: true

    - name: Change postgres password
      command: psql -c "ALTER USER {{ hostvars[inventory_hostname]['DB_USER'] }} WITH PASSWORD '{{ hostvars[inventory_hostname]['DB_PASSWORD'] }}';"
      become_user: postgres